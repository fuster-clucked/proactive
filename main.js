/* Generated by the Nim Compiler v0.17.0 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3454 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3487 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3442.node = NNI3442;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3487.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3487, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3438.base = NTI3424;
NTI3442.base = NTI3438;
var NNI13009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI13009.node = NNI13009;
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
NTI3440.base = NTI3438;
var NNI3454 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3454.node = NNI3454;
NTI3454.base = NTI3424;
function makeNimstrLit(c_14003) {

    var ln = c_14003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function setConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_19217, src_19218, ti_19219) {

var result_19629 = null;
switch (ti_19219.kind) {
case 21: case 22: case 23: case 5: if (!(isFatPointer_19201(ti_19219))) {
result_19629 = src_19218;
}
else {
result_19629 = [src_19218[0], src_19218[1]];}


break;
case 19:       if (dest_19217 === null || dest_19217 === undefined) {
        dest_19217 = {};
      }
      else {
        for (var key in dest_19217) { delete dest_19217[key]; }
      }
      for (var key in src_19218) { dest_19217[key] = src_19218[key]; }
      result_19629 = dest_19217;
    
break;
case 18: case 17: if (!((ti_19219.base == null))) {
result_19629 = nimCopy(dest_19217, src_19218, ti_19219.base);
}
else {
if ((ti_19219.kind == 17)) {
result_19629 = (dest_19217 === null || dest_19217 === undefined) ? {m_type: ti_19219} : dest_19217;}
else {
result_19629 = (dest_19217 === null || dest_19217 === undefined) ? {} : dest_19217;}
}
nimCopyAux(result_19629, src_19218, ti_19219.node);

break;
case 24: case 4: case 27: case 16:       if (src_19218 === null) {
        result_19629 = null;
      }
      else {
        if (dest_19217 === null || dest_19217 === undefined) {
          dest_19217 = new Array(src_19218.length);
        }
        else {
          dest_19217.length = src_19218.length;
        }
        result_19629 = dest_19217;
        for (var i = 0; i < src_19218.length; ++i) {
          result_19629[i] = nimCopy(result_19629[i], src_19218[i], ti_19219.base);
        }
      }
    
break;
case 28:       if (src_19218 !== null) {
        result_19629 = src_19218.slice(0);
      }
    
break;
default: 
result_19629 = src_19218;
break;
}
return result_19629;
}
function eqStrings(a_16603, b_16604) {

    if (a_16603 == b_16604) return true;
    if ((!a_16603) || (!b_16604)) return false;
    var alen = a_16603.length;
    if (alen != b_16604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16603[i] != b_16604[i]) return false;
    return true;
  }
function arrayConstr(len_19664, value_19665, typ_19666) {

      var result = new Array(len_19664);
      for (var i = 0; i < len_19664; ++i) result[i] = nimCopy(null, value_19665, typ_19666);
      return result;
    }
function cstrToNimstr(c_14203) {

  var ln = c_14203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function toJSStr(s_14403) {

    var len = s_14403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_14403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_14403[i] < 128)
        asciiPart[i] = fcc(s_14403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_13406, ename_13407) {

e_13406.name = ename_13407;
if ((excHandler == 0)) {
unhandledException(e_13406);
}

e_13406.trace = nimCopy(null, rawWriteStackTrace_13228(), NTI138);
throw e_13406;}
function chckIndx(i_19803, a_19804, b_19805) {

var Tmp1;
var result_19806 = 0;
BeforeRet: do {
if (!(a_19804 <= i_19803)) Tmp1 = false; else {Tmp1 = (i_19803 <= b_19805); }if (Tmp1) {
result_19806 = i_19803;
break BeforeRet;
}
else {
raiseIndexError();
}

} while (false); 
return result_19806;
}
function addInt(a_16803, b_16804) {

      var result = a_16803 + b_16804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function negInt(a_18803) {

var result_18804 = 0;
result_18804 = (a_18803 * -1);
return result_18804;
}
function subInt(a_17003, b_17004) {

      var result = a_17003 - b_17004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function mulInt(a_17203, b_17204) {

      var result = a_17203 * b_17204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
var nimvm_5887 = false;
var nim_program_result = 0;
var globalRaiseHook_11005 = [null];
var localRaiseHook_11010 = [null];
var outOfMemHook_11013 = [null];
function isFatPointer_19201(ti_19203) {

var result_19204 = false;
BeforeRet: do {
result_19204 = !((ConstSet1[ti_19203.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_19204;
}
function nimCopyAux(dest_19222, src_19223, n_19225) {

switch (n_19225.kind) {
case 0: 
break;
case 1:       dest_19222[n_19225.offset] = nimCopy(dest_19222[n_19225.offset], src_19223[n_19225.offset], n_19225.typ);
    
break;
case 2: L1: do {
var i_19615 = 0;
var colontmp__19617 = 0;
colontmp__19617 = (n_19225.len - 1);
var res_19620 = 0;
L2: do {
L3: while (true) {
if (!(res_19620 <= colontmp__19617)) break L3;
i_19615 = res_19620;
nimCopyAux(dest_19222, src_19223, n_19225.sons[i_19615]);
res_19620 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_19222[n_19225.offset] = nimCopy(dest_19222[n_19225.offset], src_19223[n_19225.offset], n_19225.typ);
      for (var i = 0; i < n_19225.sons.length; ++i) {
        nimCopyAux(dest_19222, src_19223, n_19225.sons[i][1]);
      }
    
break;
}
}
function add_11029(x_11032, x_11032_Idx, y_11033) {

        var len = x_11032[0].length-1;
        for (var i = 0; i < y_11033.length; ++i) {
          x_11032[0][len] = y_11033.charCodeAt(i);
          ++len;
        }
        x_11032[0][len] = 0
      }
function auxWriteStackTrace_13004(f_13006) {

var Tmp3;
var result_13007 = [null];
var it_13015 = f_13006;
var i_13016 = 0;
var total_13017 = 0;
var tempFrames_13021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI13009);
L1: do {
L2: while (true) {
if (!!((it_13015 == null))) Tmp3 = false; else {Tmp3 = (i_13016 <= 63); }if (!Tmp3) break L2;
tempFrames_13021[i_13016].Field0 = it_13015.procname;
tempFrames_13021[i_13016].Field1 = it_13015.line;
i_13016 += 1;
total_13017 += 1;
it_13015 = it_13015.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_13015 == null))) break L5;
total_13017 += 1;
it_13015 = it_13015.prev;
}
} while(false);
result_13007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
if (!((total_13017 == i_13016))) {
if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_13007[0] = makeNimstrLit("(");};
if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(cstrToNimstr(((total_13017 - i_13016))+"")); } else { result_13007[0] = cstrToNimstr(((total_13017 - i_13016))+"");};
if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_13007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
}

L6: do {
var j_13215 = 0;
var colontmp__13221 = 0;
colontmp__13221 = (i_13016 - 1);
var res_13224 = colontmp__13221;
L7: do {
L8: while (true) {
if (!(0 <= res_13224)) break L8;
j_13215 = res_13224;
add_11029(result_13007, 0, tempFrames_13021[j_13215].Field0);
if ((0 < tempFrames_13021[j_13215].Field1)) {
if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_13007[0] = makeNimstrLit(", line: ");};
if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_13021[j_13215].Field1)+"")); } else { result_13007[0] = cstrToNimstr((tempFrames_13021[j_13215].Field1)+"");};
}

if (result_13007[0] != null) { result_13007[0] = (result_13007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_13007[0] = makeNimstrLit("\x0A");};
res_13224 -= 1;
}
} while(false);
} while(false);
return result_13007[0];
}
function rawWriteStackTrace_13228() {

var result_13230 = null;
if (!((framePtr == null))) {
result_13230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_13004(framePtr)), NTI138);
}
else {
result_13230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
}

return result_13230;
}
function unhandledException(e_13253) {

var Tmp1;
var buf_13254 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_13253.message, null))) Tmp1 = false; else {Tmp1 = !((e_13253.message[0] == 0)); }if (Tmp1) {
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13254[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(e_13253.message); } else { buf_13254[0] = e_13253.message;};
}
else {
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13254[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13254[0] = makeNimstrLit(" [");};
add_11029(buf_13254, 0, e_13253.name);
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13254[0] = makeNimstrLit("]\x0A");};
if (buf_13254[0] != null) { buf_13254[0] = (buf_13254[0].slice(0, -1)).concat(rawWriteStackTrace_13228()); } else { buf_13254[0] = rawWriteStackTrace_13228();};
var cbuf_13401 = toJSStr(buf_13254[0]);
framePtr = null;
  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_13401);
  }
  else {
    throw cbuf_13401;
  }
  }
function raiseOverflow() {

var e_13840 = null;
e_13840 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null};
e_13840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
e_13840.parent = null;
raiseException(e_13840, "OverflowError");
}
function raiseDivByZero() {

var e_13858 = null;
e_13858 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_13858.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
e_13858.parent = null;
raiseException(e_13858, "DivByZeroError");
}
var lc_30240 = [{}];
function el_33002(tag_33004) {

var result_33005 = null;
var F={procname:"html.el",prev:framePtr,filename:"html.nim",line:0};
framePtr = F;
F.line = 7;
result_33005 = document.createElement(tag_33004);
framePtr = F.prev;
return result_33005;
}
function signal_36104(read_36109, listen_36123) {

var result_36125 = null;
var F={procname:"signal.signal",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 11;
result_36125 = {read: read_36109, listen: listen_36123};
framePtr = F.prev;
return result_36125;
}
function switch_36086() {

function colonanonymous__36090() {

var result_36093 = false;
var F={procname:"switch.:anonymous",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 43;
result_36093 = input_36089.checked;
framePtr = F.prev;
return result_36093;
}
function colonanonymous__36094(write_36099) {

function colonanonymous__36100(ev_36102) {

var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 46;
write_36099(input_36089.checked);
framePtr = F.prev;
}
var F={procname:"switch.:anonymous",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 44;
write_36099(input_36089.checked);
F.line = 45;
input_36089.addEventListener("change", colonanonymous__36100);
framePtr = F.prev;
}
var result_36088 = null;
var F={procname:"main.switch",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 39;
F.line = 39;
var input_36089 = el_33002("input");
F.line = 40;
input_36089.type = "checkbox";
result_36088 = {node: input_36089, src: signal_36104(colonanonymous__36090, colonanonymous__36094)};
framePtr = F.prev;
return result_36088;
}
function signal_36215(read_36220, listen_36234) {

var result_36236 = null;
var F={procname:"signal.signal",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 11;
result_36236 = {read: read_36220, listen: listen_36234};
framePtr = F.prev;
return result_36236;
}
function slider_36197() {

function colonanonymous__36201() {

var result_36204 = 0;
var F={procname:"slider.:anonymous",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 75;
result_36204 = window.parseInt(input_36200.value);
framePtr = F.prev;
return result_36204;
}
function colonanonymous__36205(write_36210) {

function colonanonymous__36211(ev_36213) {

var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 78;
write_36210(window.parseInt(input_36200.value));
framePtr = F.prev;
}
var F={procname:"slider.:anonymous",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 76;
write_36210(window.parseInt(input_36200.value));
F.line = 77;
input_36200.addEventListener("input", colonanonymous__36211);
framePtr = F.prev;
}
var result_36199 = null;
var F={procname:"main.slider",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 71;
F.line = 71;
var input_36200 = el_33002("input");
F.line = 72;
input_36200.type = "range";
result_36199 = {node: input_36200, src: signal_36215(colonanonymous__36201, colonanonymous__36205)};
framePtr = F.prev;
return result_36199;
}
var sw1_36262 = switch_36086();
var sw2_36263 = switch_36086();
var sw3a_36264 = switch_36086();
var sw3b_36265 = switch_36086();
var sw4a_36266 = switch_36086();
var sw4b_36267 = switch_36086();
var sw5a_36268 = switch_36086();
var sw5b_36269 = switch_36086();
var sl1_36270 = slider_36197();
var sl2_36271 = slider_36197();
var sl3a_36272 = slider_36197();
var sl3b_36273 = slider_36197();
var sl4a_36274 = slider_36197();
var sl4b_36275 = slider_36197();
var sl5a_36276 = slider_36197();
var sl5b_36277 = slider_36197();
function raiseIndexError() {

var e_13894 = null;
e_13894 = {m_type: NTI3454, parent: null, name: null, message: null, trace: null};
e_13894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
e_13894.parent = null;
raiseException(e_13894, "IndexError");
}
function body_33019(nodes_33022) {

var F={procname:"html.body",prev:framePtr,filename:"html.nim",line:0};
framePtr = F;
L1: do {
F.line = 24;
var node_33047 = null;
F.line = 2052;
var i_33051 = 0;
L2: do {
F.line = 2053;
L3: while (true) {
if (!(i_33051 < (nodes_33022 != null ? nodes_33022.length : 0))) break L3;
F.line = 2054;
node_33047 = nodes_33022[chckIndx(i_33051, 0, nodes_33022.length)-0];
F.line = 25;
document.body.appendChild(node_33047);
F.line = 2055;
i_33051 = addInt(i_33051, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
}
function el_33006(tag_33008, text_33009) {

var result_33010 = null;
var F={procname:"html.el",prev:framePtr,filename:"html.nim",line:0};
framePtr = F;
F.line = 11;
result_33010 = el_33002(tag_33008);
F.line = 12;
result_33010.textContent = text_33009;
framePtr = F.prev;
return result_33010;
}
function h1_33011(text_33013) {

var result_33014 = null;
var F={procname:"html.h1",prev:framePtr,filename:"html.nim",line:0};
framePtr = F;
F.line = 16;
result_33014 = el_33006("h1", text_33013);
framePtr = F.prev;
return result_33014;
}
function h2_33015(text_33017) {

var result_33018 = null;
var F={procname:"html.h2",prev:framePtr,filename:"html.nim",line:0};
framePtr = F;
F.line = 20;
result_33018 = el_33006("h2", text_33017);
framePtr = F.prev;
return result_33018;
}
function panel_36021(text_36023, nodes_36025) {

var result_36026 = null;
var F={procname:"main.panel",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 25;
result_36026 = el_33002("fieldset");
F.line = 26;
result_36026.appendChild(el_33006("legend", text_36023));
L1: do {
F.line = 28;
var node_36034 = null;
F.line = 2052;
var i_36038 = 0;
L2: do {
F.line = 2053;
L3: while (true) {
if (!(i_36038 < (nodes_36025 != null ? nodes_36025.length : 0))) break L3;
F.line = 2054;
node_36034 = nodes_36025[chckIndx(i_36038, 0, nodes_36025.length)-0];
F.line = 29;
result_36026.appendChild(node_36034);
F.line = 2055;
i_36038 = addInt(i_36038, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
return result_36026;
}
function light_36139(src_36143) {

function colonanonymous__36146(val_36148) {

var Tmp1;
var F={procname:"light.:anonymous",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 59;
if (val_36148) {
Tmp1 = makeNimstrLit("on");
}
else {
Tmp1 = makeNimstrLit("off");
}

output_36145.className = toJSStr(Tmp1);
framePtr = F.prev;
}
var result_36144 = null;
var F={procname:"main.light",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 56;
F.line = 56;
var output_36145 = el_33002("output");
F.line = 58;
src_36143.listen(colonanonymous__36146);
result_36144 = {node: output_36145};
framePtr = F.prev;
return result_36144;
}
function map1_36335(src_36340, fn_36345) {

function colonanonymous__36348() {

var result_36351 = false;
var F={procname:"map1.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 15;
result_36351 = fn_36345(src_36340.read());
framePtr = F.prev;
return result_36351;
}
function colonanonymous__36352(write_36357) {

function colonanonymous__36358(val_36360) {

var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 16;
write_36357(fn_36345(val_36360));
framePtr = F.prev;
}
var F={procname:"map1.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 16;
src_36340.listen(colonanonymous__36358);
framePtr = F.prev;
}
var result_36347 = null;
var F={procname:"map1.map1",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 15;
result_36347 = signal_36104(colonanonymous__36348, colonanonymous__36352);
framePtr = F.prev;
return result_36347;
}
function not_36285(src_36289) {

function colonanonymous__36326(val_36328) {

var result_36330 = false;
var F={procname:"not.:anonymous",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 7;
result_36330 = !(val_36328);
framePtr = F.prev;
return result_36330;
}
var result_36290 = null;
var F={procname:"not.not",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 7;
result_36290 = map1_36335(src_36289, colonanonymous__36326);
framePtr = F.prev;
return result_36290;
}
function map2_36445(src1_36450, src2_36453, fn_36460) {

function colonanonymous__36463() {

var result_36466 = false;
var F={procname:"map2.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 20;
result_36466 = fn_36460(src1_36450.read(), src2_36453.read());
framePtr = F.prev;
return result_36466;
}
function colonanonymous__36467(write_36472) {

function colonanonymous__36473(val_36475) {

var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 21;
write_36472(fn_36460(val_36475, src2_36453.read()));
framePtr = F.prev;
}
function colonanonymous__36479(val_36481) {

var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 22;
write_36472(fn_36460(src1_36450.read(), val_36481));
framePtr = F.prev;
}
var F={procname:"map2.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 21;
src1_36450.listen(colonanonymous__36473);
F.line = 22;
src2_36453.listen(colonanonymous__36479);
framePtr = F.prev;
}
var result_36462 = null;
var F={procname:"map2.map2",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 20;
result_36462 = signal_36104(colonanonymous__36463, colonanonymous__36467);
framePtr = F.prev;
return result_36462;
}
function and_36389(src1_36393, src2_36395) {

function colonanonymous__36433(val1_36435, val2_36436) {

var result_36438 = false;
var F={procname:"and.:anonymous",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 11;
result_36438 = (val1_36435 && val2_36436);
framePtr = F.prev;
return result_36438;
}
var result_36396 = null;
var F={procname:"and.and",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 11;
result_36396 = map2_36445(src1_36393, src2_36395, colonanonymous__36433);
framePtr = F.prev;
return result_36396;
}
function xor_36510(src1_36514, src2_36516) {

function colonanonymous__36554(val1_36556, val2_36557) {

var result_36559 = false;
var F={procname:"xor.:anonymous",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 19;
result_36559 = (val1_36556 != val2_36557);
framePtr = F.prev;
return result_36559;
}
var result_36517 = null;
var F={procname:"xor.xor",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 19;
result_36517 = map2_36445(src1_36514, src2_36516, colonanonymous__36554);
framePtr = F.prev;
return result_36517;
}
function or_36598(src1_36602, src2_36604) {

function colonanonymous__36642(val1_36644, val2_36645) {

var result_36647 = false;
var F={procname:"or.:anonymous",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 15;
result_36647 = (val1_36644 || val2_36645);
framePtr = F.prev;
return result_36647;
}
var result_36605 = null;
var F={procname:"or.or",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 15;
result_36605 = map2_36445(src1_36602, src2_36604, colonanonymous__36642);
framePtr = F.prev;
return result_36605;
}
function text_36709(sig_36714) {

function colonanonymous__36717(val_36719) {

var F={procname:"text.:anonymous",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 91;
output_36716.textContent = toJSStr(cstrToNimstr((val_36719)+""));
framePtr = F.prev;
}
var result_36715 = null;
var F={procname:"text.text",prev:framePtr,filename:"main.nim",line:0};
framePtr = F;
F.line = 88;
F.line = 88;
var output_36716 = el_33002("output");
F.line = 90;
sig_36714.listen(colonanonymous__36717);
result_36715 = {node: output_36716};
framePtr = F.prev;
return result_36715;
}
function map1_36774(src_36779, fn_36784) {

function colonanonymous__36787() {

var result_36790 = 0;
var F={procname:"map1.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 15;
result_36790 = fn_36784(src_36779.read());
framePtr = F.prev;
return result_36790;
}
function colonanonymous__36791(write_36796) {

function colonanonymous__36797(val_36799) {

var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 16;
write_36796(fn_36784(val_36799));
framePtr = F.prev;
}
var F={procname:"map1.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 16;
src_36779.listen(colonanonymous__36797);
framePtr = F.prev;
}
var result_36786 = null;
var F={procname:"map1.map1",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 15;
result_36786 = signal_36215(colonanonymous__36787, colonanonymous__36791);
framePtr = F.prev;
return result_36786;
}
function minus__36724(src_36728) {

function colonanonymous__36765(val_36767) {

var result_36769 = 0;
var F={procname:"-.:anonymous",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 23;
result_36769 = negInt(val_36767);
framePtr = F.prev;
return result_36769;
}
var result_36729 = null;
var F={procname:"-.-",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 23;
result_36729 = map1_36774(src_36728, colonanonymous__36765);
framePtr = F.prev;
return result_36729;
}
function map2_36926(src1_36931, src2_36934, fn_36941) {

function colonanonymous__36944() {

var result_36947 = 0;
var F={procname:"map2.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 20;
result_36947 = fn_36941(src1_36931.read(), src2_36934.read());
framePtr = F.prev;
return result_36947;
}
function colonanonymous__36948(write_36953) {

function colonanonymous__36954(val_36956) {

var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 21;
write_36953(fn_36941(val_36956, src2_36934.read()));
framePtr = F.prev;
}
function colonanonymous__36960(val_36962) {

var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 22;
write_36953(fn_36941(src1_36931.read(), val_36962));
framePtr = F.prev;
}
var F={procname:"map2.:anonymous",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 21;
src1_36931.listen(colonanonymous__36954);
F.line = 22;
src2_36934.listen(colonanonymous__36960);
framePtr = F.prev;
}
var result_36943 = null;
var F={procname:"map2.map2",prev:framePtr,filename:"signal.nim",line:0};
framePtr = F;
F.line = 20;
result_36943 = signal_36215(colonanonymous__36944, colonanonymous__36948);
framePtr = F.prev;
return result_36943;
}
function plus__36870(src1_36874, src2_36876) {

function colonanonymous__36914(val1_36916, val2_36917) {

var result_36919 = 0;
var F={procname:"+.:anonymous",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 27;
result_36919 = addInt(val1_36916, val2_36917);
framePtr = F.prev;
return result_36919;
}
var result_36877 = null;
var F={procname:"+.+",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 27;
result_36877 = map2_36926(src1_36874, src2_36876, colonanonymous__36914);
framePtr = F.prev;
return result_36877;
}
function minus__37033(src1_37037, src2_37039) {

function colonanonymous__37077(val1_37079, val2_37080) {

var result_37082 = 0;
var F={procname:"-.:anonymous",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 31;
result_37082 = subInt(val1_37079, val2_37080);
framePtr = F.prev;
return result_37082;
}
var result_37040 = null;
var F={procname:"-.-",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 31;
result_37040 = map2_36926(src1_37037, src2_37039, colonanonymous__37077);
framePtr = F.prev;
return result_37040;
}
function star__37151(src1_37155, src2_37157) {

function colonanonymous__37195(val1_37197, val2_37198) {

var result_37200 = 0;
var F={procname:"*.:anonymous",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 35;
result_37200 = mulInt(val1_37197, val2_37198);
framePtr = F.prev;
return result_37200;
}
var result_37158 = null;
var F={procname:"*.*",prev:framePtr,filename:"logic.nim",line:0};
framePtr = F;
F.line = 35;
result_37158 = map2_36926(src1_37155, src2_37157, colonanonymous__37195);
framePtr = F.prev;
return result_37158;
}
body_33019([h1_33011(document.title), h2_33015("boolean"), panel_36021("trival", [sw1_36262.node, light_36139(sw1_36262.src).node]), panel_36021("NOT", [sw2_36263.node, light_36139(not_36285(sw2_36263.src)).node]), panel_36021("AND", [sw3a_36264.node, sw3b_36265.node, light_36139(and_36389(sw3a_36264.src, sw3b_36265.src)).node]), panel_36021("XOR", [sw4a_36266.node, sw4b_36267.node, light_36139(xor_36510(sw4a_36266.src, sw4b_36267.src)).node]), panel_36021("NAND", [sw5a_36268.node, sw5b_36269.node, light_36139(or_36598(not_36285(sw5a_36268.src), not_36285(sw5b_36269.src))).node]), h2_33015("number"), panel_36021("trivial", [sl1_36270.node, text_36709(sl1_36270.src).node]), panel_36021("MINUS", [sl2_36271.node, text_36709(minus__36724(sl2_36271.src)).node]), panel_36021("ADD", [sl3a_36272.node, sl3b_36273.node, text_36709(plus__36870(sl3a_36272.src, sl3b_36273.src)).node]), panel_36021("DIFF", [sl4a_36274.node, sl4b_36275.node, text_36709(minus__37033(sl4a_36274.src, sl4b_36275.src)).node]), panel_36021("MULT", [sl5a_36276.node, sl5b_36277.node, text_36709(star__37151(sl5a_36276.src, sl5b_36277.src)).node])]);
